// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moneymovedpbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyMovedServiceClient is the client API for MoneyMovedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyMovedServiceClient interface {
	StreamMoneyMovementEvent(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_StreamMoneyMovementEventClient, error)
}

type moneyMovedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyMovedServiceClient(cc grpc.ClientConnInterface) MoneyMovedServiceClient {
	return &moneyMovedServiceClient{cc}
}

func (c *moneyMovedServiceClient) StreamMoneyMovementEvent(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_StreamMoneyMovementEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoneyMovedService_ServiceDesc.Streams[0], "/money_moved.v1.MoneyMovedService/StreamMoneyMovementEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &moneyMovedServiceStreamMoneyMovementEventClient{stream}
	return x, nil
}

type MoneyMovedService_StreamMoneyMovementEventClient interface {
	Send(*StreamMoneyMovementEventRequest) error
	Recv() (*StreamMoneyMovementEventResponse, error)
	grpc.ClientStream
}

type moneyMovedServiceStreamMoneyMovementEventClient struct {
	grpc.ClientStream
}

func (x *moneyMovedServiceStreamMoneyMovementEventClient) Send(m *StreamMoneyMovementEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moneyMovedServiceStreamMoneyMovementEventClient) Recv() (*StreamMoneyMovementEventResponse, error) {
	m := new(StreamMoneyMovementEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoneyMovedServiceServer is the server API for MoneyMovedService service.
// All implementations must embed UnimplementedMoneyMovedServiceServer
// for forward compatibility
type MoneyMovedServiceServer interface {
	StreamMoneyMovementEvent(MoneyMovedService_StreamMoneyMovementEventServer) error
	mustEmbedUnimplementedMoneyMovedServiceServer()
}

// UnimplementedMoneyMovedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyMovedServiceServer struct {
}

func (UnimplementedMoneyMovedServiceServer) StreamMoneyMovementEvent(MoneyMovedService_StreamMoneyMovementEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMoneyMovementEvent not implemented")
}
func (UnimplementedMoneyMovedServiceServer) mustEmbedUnimplementedMoneyMovedServiceServer() {}

// UnsafeMoneyMovedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyMovedServiceServer will
// result in compilation errors.
type UnsafeMoneyMovedServiceServer interface {
	mustEmbedUnimplementedMoneyMovedServiceServer()
}

func RegisterMoneyMovedServiceServer(s grpc.ServiceRegistrar, srv MoneyMovedServiceServer) {
	s.RegisterService(&MoneyMovedService_ServiceDesc, srv)
}

func _MoneyMovedService_StreamMoneyMovementEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MoneyMovedServiceServer).StreamMoneyMovementEvent(&moneyMovedServiceStreamMoneyMovementEventServer{stream})
}

type MoneyMovedService_StreamMoneyMovementEventServer interface {
	Send(*StreamMoneyMovementEventResponse) error
	Recv() (*StreamMoneyMovementEventRequest, error)
	grpc.ServerStream
}

type moneyMovedServiceStreamMoneyMovementEventServer struct {
	grpc.ServerStream
}

func (x *moneyMovedServiceStreamMoneyMovementEventServer) Send(m *StreamMoneyMovementEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moneyMovedServiceStreamMoneyMovementEventServer) Recv() (*StreamMoneyMovementEventRequest, error) {
	m := new(StreamMoneyMovementEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoneyMovedService_ServiceDesc is the grpc.ServiceDesc for MoneyMovedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyMovedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "money_moved.v1.MoneyMovedService",
	HandlerType: (*MoneyMovedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMoneyMovementEvent",
			Handler:       _MoneyMovedService_StreamMoneyMovementEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "money_moved/v1/money_moved.proto",
}
