// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moneymovedpbv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyMovedServiceClient is the client API for MoneyMovedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyMovedServiceClient interface {
	StreamMoneyMovedEvent(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_StreamMoneyMovedEventClient, error)
	MoneyMovedEventClientStream(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_MoneyMovedEventClientStreamClient, error)
}

type moneyMovedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyMovedServiceClient(cc grpc.ClientConnInterface) MoneyMovedServiceClient {
	return &moneyMovedServiceClient{cc}
}

func (c *moneyMovedServiceClient) StreamMoneyMovedEvent(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_StreamMoneyMovedEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoneyMovedService_ServiceDesc.Streams[0], "/money_moved.v2.MoneyMovedService/StreamMoneyMovedEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &moneyMovedServiceStreamMoneyMovedEventClient{stream}
	return x, nil
}

type MoneyMovedService_StreamMoneyMovedEventClient interface {
	Send(*StreamMoneyMovedEventRequest) error
	Recv() (*StreamMoneyMovedEventResponse, error)
	grpc.ClientStream
}

type moneyMovedServiceStreamMoneyMovedEventClient struct {
	grpc.ClientStream
}

func (x *moneyMovedServiceStreamMoneyMovedEventClient) Send(m *StreamMoneyMovedEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moneyMovedServiceStreamMoneyMovedEventClient) Recv() (*StreamMoneyMovedEventResponse, error) {
	m := new(StreamMoneyMovedEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moneyMovedServiceClient) MoneyMovedEventClientStream(ctx context.Context, opts ...grpc.CallOption) (MoneyMovedService_MoneyMovedEventClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoneyMovedService_ServiceDesc.Streams[1], "/money_moved.v2.MoneyMovedService/MoneyMovedEventClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &moneyMovedServiceMoneyMovedEventClientStreamClient{stream}
	return x, nil
}

type MoneyMovedService_MoneyMovedEventClientStreamClient interface {
	Send(*MoneyMovedEventClientStreamRequest) error
	CloseAndRecv() (*MoneyMovedEventClientStreamResponse, error)
	grpc.ClientStream
}

type moneyMovedServiceMoneyMovedEventClientStreamClient struct {
	grpc.ClientStream
}

func (x *moneyMovedServiceMoneyMovedEventClientStreamClient) Send(m *MoneyMovedEventClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moneyMovedServiceMoneyMovedEventClientStreamClient) CloseAndRecv() (*MoneyMovedEventClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MoneyMovedEventClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoneyMovedServiceServer is the server API for MoneyMovedService service.
// All implementations must embed UnimplementedMoneyMovedServiceServer
// for forward compatibility
type MoneyMovedServiceServer interface {
	StreamMoneyMovedEvent(MoneyMovedService_StreamMoneyMovedEventServer) error
	MoneyMovedEventClientStream(MoneyMovedService_MoneyMovedEventClientStreamServer) error
	mustEmbedUnimplementedMoneyMovedServiceServer()
}

// UnimplementedMoneyMovedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyMovedServiceServer struct {
}

func (UnimplementedMoneyMovedServiceServer) StreamMoneyMovedEvent(MoneyMovedService_StreamMoneyMovedEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMoneyMovedEvent not implemented")
}
func (UnimplementedMoneyMovedServiceServer) MoneyMovedEventClientStream(MoneyMovedService_MoneyMovedEventClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MoneyMovedEventClientStream not implemented")
}
func (UnimplementedMoneyMovedServiceServer) mustEmbedUnimplementedMoneyMovedServiceServer() {}

// UnsafeMoneyMovedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyMovedServiceServer will
// result in compilation errors.
type UnsafeMoneyMovedServiceServer interface {
	mustEmbedUnimplementedMoneyMovedServiceServer()
}

func RegisterMoneyMovedServiceServer(s grpc.ServiceRegistrar, srv MoneyMovedServiceServer) {
	s.RegisterService(&MoneyMovedService_ServiceDesc, srv)
}

func _MoneyMovedService_StreamMoneyMovedEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MoneyMovedServiceServer).StreamMoneyMovedEvent(&moneyMovedServiceStreamMoneyMovedEventServer{stream})
}

type MoneyMovedService_StreamMoneyMovedEventServer interface {
	Send(*StreamMoneyMovedEventResponse) error
	Recv() (*StreamMoneyMovedEventRequest, error)
	grpc.ServerStream
}

type moneyMovedServiceStreamMoneyMovedEventServer struct {
	grpc.ServerStream
}

func (x *moneyMovedServiceStreamMoneyMovedEventServer) Send(m *StreamMoneyMovedEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moneyMovedServiceStreamMoneyMovedEventServer) Recv() (*StreamMoneyMovedEventRequest, error) {
	m := new(StreamMoneyMovedEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MoneyMovedService_MoneyMovedEventClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MoneyMovedServiceServer).MoneyMovedEventClientStream(&moneyMovedServiceMoneyMovedEventClientStreamServer{stream})
}

type MoneyMovedService_MoneyMovedEventClientStreamServer interface {
	SendAndClose(*MoneyMovedEventClientStreamResponse) error
	Recv() (*MoneyMovedEventClientStreamRequest, error)
	grpc.ServerStream
}

type moneyMovedServiceMoneyMovedEventClientStreamServer struct {
	grpc.ServerStream
}

func (x *moneyMovedServiceMoneyMovedEventClientStreamServer) SendAndClose(m *MoneyMovedEventClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moneyMovedServiceMoneyMovedEventClientStreamServer) Recv() (*MoneyMovedEventClientStreamRequest, error) {
	m := new(MoneyMovedEventClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoneyMovedService_ServiceDesc is the grpc.ServiceDesc for MoneyMovedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyMovedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "money_moved.v2.MoneyMovedService",
	HandlerType: (*MoneyMovedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMoneyMovedEvent",
			Handler:       _MoneyMovedService_StreamMoneyMovedEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MoneyMovedEventClientStream",
			Handler:       _MoneyMovedService_MoneyMovedEventClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "money_moved/v2/money_moved.proto",
}
